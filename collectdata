#!/bin/bash

#This script will allow you to collect Lidar, image, and vector-nav data.

#This defines the folder and name of the csv file for the LIDAR
#it must take the following format "/another/random/dir/somename.csv" <- WITH QUOTATIONS
LIDARLOC="data_storage/"

#this defines the folder where the pictures are located,
#it must take the following format "/some/random/dir/"
PICLOC="data_storage/pics/"

#this defines the folder where the vector-nav data is being held
#it must take the following
VNLOC="data_storage/vn.csv"

#DO NOT EDIT ANYTHING BELOW THE BIG DOUBLE LINES UNLESS YOU KNOW WHAT YOU ARE DOING

#That being said, if you know what you're doing then you should probably
#...make it nicer.  This was my first ever large bash script. :-)
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
HELP="Cmd ... Explanation\n0 ..... kill all processes, exit script\n1 ..... kill LIDAR\n2 ..... kill camera\n3 ..... kill VectorNav\n4 ..... print help"

echo -e "Welcome to the Intelligent Robotics Laboratory Datalogger!\n"

if [ ! -d data_storage ]; then
    echo -e "Data Directory not found ... creating"
    mkdir data_storage
    mkdir data_storage/pics
fi

if [ ! -d data_storage/pics ]; then
    echo -e "Pics Directory not found ... creating"
    mkdir data_storage/pics
fi



# I got tired of typing yes and no.
cmdLDR="yes";
dispLDR="";

cmdIMG="yes";
dispIMG="";

cmdVN="yes";
dispVN="";


#echo -e "Would you like to collect LIDAR data? ( type 'yes' if so, otherwise type anything else )"
#read cmdLDR

#if [ "$cmdLDR" = "yes" ]; then
#    echo -e "Would you like to display the LIDAR?\n*This may slow data collection"
#    read dispLDR
#fi
#
#if [ "$dispLDR" = "yes" ]; then
#    dispLDR="-d"; 
#else
#    dispLDR="";
#fi
#
#echo "$dispLDR"
#
#echo -e "\nWould you like to collect image data? ( type 'yes' if so, otherwise type anything else )"
#read cmdIMG
#
#if [ "$cmdIMG" = "yes" ]; then
#    echo -e "Would you like to display the image data?\n*This may slow data collection"
#    read dispIMG
#fi
#
#echo -e "\nWould you like to collect VectorNav data? ( type 'yes' if so, otherwise type anything else )"
#read cmdVN



# trap ctrl-c so processes are killed with the menu task
trap ctrlc INT
function ctrlc() {
	echo -e "Killing Background Tasks...\n"
	kill $(pidof LIDAR_OMG)
	kill $(pidof CustomImageEx)
	kill $(pidof main)
	exit 1
}



# Start Background Processes
#TIME=5
#echo -e "Data collection commencing\n"
#for i in {5..1}
#do
#	echo -e "$i"
#	sleep 1
#done
echo -e "Data collection has begun\n"

if [ "$cmdLDR" = "yes" ]; then
    echo -e "collecting LIDAR Data\n"
    echo "Display tag: $dispLDR"
    urg_library-1.1.3/samples/c/sensor_parameter -e 192.168.0.10 > "${LIDARLOC}lidar_info.txt" 
    sleep 1
    urg_library-1.1.3/samples/c/get_multiecho_intensity -e 192.168.0.10 > "${LIDARLOC}lidar_data.csv" &
fi

if [ "$cmdIMG" = "yes" ]; then
    echo -e "collecting image data\n"
    flycapture.2.6.3.4_armhf/bin/CustomImageEx ${PICLOC} > ${PICLOC}caminfo &
fi

if [ "$cmdVN" = "yes" ]; then
    echo -e "collecting vector-nav data\n"
    vnccpplib-0.3.2/examples/vn200_linux_binary_async/vn200_linux_binary_async > ${VNLOC} &
fi

if [ "$dispIMG" = "yes" ]; then
    sleep 2
    display_scripts/ImageViewer.py &
fi



# Display Background Processes
ps



# Command Menu 
echo -e "$HELP"
while [ 1 ]; do
    read cmd

    if [ \( "$cmd" -eq 1 \) -o \( "$cmd" -eq 0 \) ]; then
        echo "killing lidar"
        kill $(pidof sensor_parameter)
        echo -e "lidar killed\n"
    fi
    
    if [ \( "$cmd" -eq 1 \) -o \( "$cmd" -eq 0 \) ]; then
        echo "killing lidar"
        kill $(pidof get_multiecho_intensity)
        echo -e "lidar killed\n"
    fi

    if [ \( "$cmd" -eq 2 \) -o \( "$cmd" -eq 0 \) ]; then
        echo "killing camera"
        kill $(pidof CustomImageEx)
        kill `pidof python`
        echo -e "camera killed\n"
    fi

    if [ \( "$cmd" -eq 3 \) -o \( "$cmd" -eq 0 \) ]; then
        echo "killing vector nav"
        kill $(pidof vn200_linux_binary_async)
        echo -e "vector nav killed\n"
    fi

    if [ "$cmd" -eq 0 ]; then
        echo "Thank you for using the IRL Data-logger!"
        break
    fi

    if [ "$cmd" -eq 4 ]; then
        echo -e $HELP
    fi
done
